{"ast":null,"code":"var _jsxFileName = \"/home/agilepc99/Desktop/tutorial/react_table/src/components/FilteringTable.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useMemo } from \"react\";\nimport { useTable, useGlobalFilter, useFilters } from \"react-table\";\nimport MOCK_DATA from \"./MOCK_DATA.json\";\nimport { COLUMNS } from \"./columns\";\nimport './basicTable.css';\nimport GlobalFilter from \"./GlobalFilter\";\nimport ColumnFilter from \"./ColumnFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FilteringTable = () => {\n  _s();\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const defaultColumn = useMemo(() => {\n    return {\n      Filter: ColumnFilter\n    };\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow,\n    state,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn\n  }, useGlobalFilter, useFilters);\n  const {\n    globalFilter\n  } = state;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalFilter, {\n      filter: globalFilter,\n      setFilter: setGlobalFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children:\n        // Loop over the header rows\n        headerGroups.map(headerGroup =>\n        /*#__PURE__*/\n        // Apply the header row props\n        _jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children:\n          // Loop over the headers in each row\n          headerGroup.headers.map(column =>\n          /*#__PURE__*/\n          // Apply the header cell props\n          _jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: [\n            // Render the header\n            column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render('Filter') : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children:\n        // Loop over the table rows\n        rows.map(row => {\n          // Prepare the row for display\n          prepareRow(row);\n          return (\n            /*#__PURE__*/\n            // Apply the row props\n            _jsxDEV(\"tr\", {\n              ...row.getRowProps(),\n              children:\n              // Loop over the rows cells\n              row.cells.map(cell => {\n                // Apply the cell props\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  ...cell.getCellProps(),\n                  children:\n                  // Render the cell contents\n                  cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n        children: footerGroups.map(footerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...footerGroup.getFooterGroupProps(),\n          children: footerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"td\", {\n            ...column.getFooterProps(),\n            children: column.render(\"Footer\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FilteringTable, \"jrUVUVU9zoDoV97BsY5ZJmXIces=\", false, function () {\n  return [useTable];\n});\n_c = FilteringTable;\nexport default FilteringTable;\nvar _c;\n$RefreshReg$(_c, \"FilteringTable\");","map":{"version":3,"names":["React","useMemo","useTable","useGlobalFilter","useFilters","MOCK_DATA","COLUMNS","GlobalFilter","ColumnFilter","FilteringTable","columns","data","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","state","setGlobalFilter","globalFilter","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","canFilter","row","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps","getFooterProps"],"sources":["/home/agilepc99/Desktop/tutorial/react_table/src/components/FilteringTable.js"],"sourcesContent":["import React from \"react\";\n\nimport { useMemo } from \"react\";\n\nimport { useTable, useGlobalFilter, useFilters } from \"react-table\";\n\nimport MOCK_DATA from \"./MOCK_DATA.json\"\n\nimport { COLUMNS } from \"./columns\"\n\nimport './basicTable.css'\n\nimport GlobalFilter from \"./GlobalFilter\";\nimport ColumnFilter from \"./ColumnFilter\";\n\nconst FilteringTable = () => {\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n    const defaultColumn = useMemo(() =>{\n        return{\n            Filter: ColumnFilter\n        }\n    })\n\n\n    const { getTableProps, getTableBodyProps, headerGroups, footerGroups, rows, prepareRow, state, setGlobalFilter } = useTable({\n        columns,\n        data,\n        defaultColumn\n    }, useGlobalFilter, useFilters)\n\n\n    const { globalFilter } = state\n    return (\n        <>\n        <GlobalFilter filter= {globalFilter} setFilter= {setGlobalFilter}/>\n            <table {...getTableProps()}>\n                <thead>\n                    {// Loop over the header rows\n                        headerGroups.map(headerGroup => (\n                            // Apply the header row props\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {// Loop over the headers in each row\n                                    headerGroup.headers.map(column => (\n                                        // Apply the header cell props\n                                        <th {...column.getHeaderProps()} >\n                                            {// Render the header\n                                                column.render('Header')}\n                                                <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                        </th>\n                                    ))}\n                            </tr>\n                        ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {// Loop over the table rows\n                        rows.map(row => {\n                            // Prepare the row for display\n                            prepareRow(row)\n                            return (\n                                // Apply the row props\n                                <tr {...row.getRowProps()}>\n                                    {// Loop over the rows cells\n                                        row.cells.map(cell => {\n                                            // Apply the cell props\n                                            return (\n                                                <td {...cell.getCellProps()}>\n                                                    {// Render the cell contents\n                                                        cell.render('Cell')}\n                                                </td>\n                                            )\n                                        })}\n                                </tr>\n                            )\n                        })}\n                </tbody>\n                <tfoot>\n                    {\n                        footerGroups.map(footerGroup => (\n                            <tr {...footerGroup.getFooterGroupProps()}>\n                                {\n                                    footerGroup.headers.map(column => (\n                                        <td {...column.getFooterProps()}>\n                                            {\n                                                column.render(\"Footer\")\n                                            }\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </tfoot>\n            </table>\n        </>\n    )\n}\nexport default FilteringTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}